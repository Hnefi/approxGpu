#################################
# Author: Sravanthi Kota Venkata
#################################

# Define MATLAB-PATH with the path to the MATLAB package
MATLAB_PATH = /pkg/bin/matlab
ifeq ($(filter matlab-run,$(MAKECMDGOALS)),matlab-run) 
ifneq ($(wildcard $(MATLAB_PATH)),$(MATLAB_PATH)) 
$(error Please set the appropriate MATLAB path in MATLAB_PATH variable)
endif
endif

ifeq ($(filter mcc-run,$(MAKECMDGOALS)),mcc-run)
ifneq ($(wildcard $(MATLAB_PATH)),$(MATLAB_PATH))
$(error Please set the appropriate MATLAB path in MATLAB_PATH variable)
endif
endif

CC=nvcc
# TEX ACCESSES PER KERNEL
TEX = 1

override CFLAGS += -arch=sm_20 -rdc=true -w -DGCC -DCHECK -D$(INPUT) -D NUM_TEX=$(TEX)

COMMON_DIR := $(TOP_DIR)/common/c
BIN_DIR := $(TOP_DIR)/common/bin
M_COMMON := $(TOP_DIR)/common/matlab
M_TOOLBOX=$(TOP_DIR)/common/toolbox
TIMING_DIR := $(TOP_DIR)/cycles/$(BMARK)
MTIMING_DIR := $(TOP_DIR)/cycles/$(BMARK)
BMARK_DIR := $(TOP_DIR)/benchmarks/$(BMARK)

#The options set below and specific to each benchmark. Disparity takes 2 input images, whereas Tracking can take any >1 input images =.

# Variables exported from the benchmark specific Makefiles:
# BMARK
# INPUT - sqcif/qcif/cif

# Matlab source, data and result directory
M_DIR=$(BMARK_DIR)/src/matlab
M_DATA=$(BMARK_DIR)/data/$(INPUT)
M_RESULT=$(BMARK_DIR)/result

# C source, data and result directory
C_DIR=$(BMARK_DIR)/src/c
C_SRC := $(wildcard $(C_DIR)/*.cu)
C_OBJ=$(C_SRC:.cu=.o)
DATA_DIR=$(BMARK_DIR)/data/$(INPUT)
C_RESULT=$(M_RESULT)

# Directories for GPU kernels
CUDA_DIR=$(TOP_DIR)/common/kernels
CUDA_SRC := $(wildcard $(CUDA_DIR)/*.cu)
CUDA_OBJ := $(CUDA_SRC:.cu=.o)

# Source files for C and Common folders
COMMON_SRC = $(wildcard $(COMMON_DIR)/*.cu)
COMMON_OBJ := $(COMMON_SRC:.cu=.o)

# RULES
EXE =
INCLUDES = -I$(COMMON_DIR) -I$(C_DIR) -I$(CUDA_DIR)
CUDA_INCLUDES = -I$(CUDA_DIR)
COMPILE_C = $(CC) $(CFLAGS) -lm -O2 $(INCLUDES)
#COMPILE_C = $(CC) $(CFLAGS) -DGENERATE_OUTPUT -lm -O2 $(INCLUDES)
COMPILE_C_APPROX = $(CC) $(CFLAGS) -DAPPROXIMATE -DGENERATE_OUTPUT -lm -O2 $(INCLUDES)

COMPILE_G = $(CC) $(CFLAGS) -g -lm $(INCLUDES)
COMPILE_PG = $(COMPILE_G) -pg

c-run:
	@echo -e "Data set\t\t- $(INPUT)" 
	@./$(BMARK)$(EXE) $(DATA_DIR) $(C_RESULT) 

c-run-approx: compile-approx
	@echo -e "Data set\t\t- $(INPUT)" 
	@./$(BMARK)$(EXE) $(DATA_DIR) $(C_RESULT) | tee $(TIMING_DIR)/C_$(INPUT).txt

debug:
	@echo Running Debug C Version of the benchmark
	@$(COMPILE_G) $(COMMON_SRC) $(C_SRC) -o $(BMARK)$(EXE)
	@valgrind --leak-check=full -v ./$(BMARK)$(EXE) $(DATA_DIR) $(C_RESULT)
	#@gdb ./$(BMARK)$(EXE) $(DATA_DIR) $(C_RESULT)

profile: compile-prof
	@echo -e "Data set\t\t- $(INPUT)" 
	@./$(BMARK)$(EXE) $(DATA_DIR) $(C_RESULT)
	@gprof $(BMARK)$(EXE)
	

%.o: %.cu
	@echo "Compiling object file for $<"
	@$(COMPILE_C) -G -g -c $< -o $@

compile: $(C_OBJ) $(COMMON_OBJ) $(CUDA_OBJ)
	@echo 
	@echo -e "Benchmark\t\t- $(BMARK)"
	@$(COMPILE_C) $^ -G -g -o $(BMARK)$(EXE)

compile-approx: $(C_SRC)
	@echo
	@echo -e "Benchmark\t\t- $(BMARK)"
	@$(COMPILE_C_APPROX) $(COMMON_SRC) $(C_SRC) -o $(BMARK)$(EXE)

compile-prof: $(C_SRC)
	@echo 
	@echo -e "Benchmark\t\t- $(BMARK)"
	@$(COMPILE_PG) $(COMMON_SRC) $(C_SRC) -o $(BMARK)$(EXE)

matlab-run:
	@echo 
	@echo -e "Benchmark\t\t- $(BMARK)"
	@echo -e "Data set\t\t- $(INPUT)" 
	@cd $(M_DIR); $(MATLAB_PATH) -glnx86 -nosplash -nodisplay -r "script_run_profile('$(M_DATA)', '$(M_RESULT)', '$(INPUT)', '$(M_COMMON)', '$(M_TOOLBOX)'); quit" | tee $(MTIMING_DIR)/Matlab_$(INPUT).txt

mcc-run:
	@echo Generating a C standalone application
	cd $(M_DIR); $(MATLAB_PATH) -nosplash -nodesktop -r "mcc -m -v script_run_profile -d $(M_RESULT); quit"
	
all: c-run matlab-run mcc-run

clean:
	@-rm $(BMARK)
	@echo -e "Cleaning all kernel files..."
	@-rm -f $(CUDA_DIR)/*.o
	@-rm -f $(DATA_DIR)/*.o

.PHONY: destroy
destroy:
	@-rm $(BMARK)
	@echo -e "Cleaning all files in source directory..."
	@-rm -f *.o
	@-rm -f $(C_DIR)/*.o
	@echo -e "Cleaning all common C files..."
	@-rm -f $(COMMON_DIR)/*.o
	@echo -e "Cleaning all kernel files..."
	@-rm -f $(CUDA_DIR)/*.o
	@-rm -f $(DATA_DIR)/*.o
